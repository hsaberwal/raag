services:
  # Main application service
  raag-app:
    build: .
    container_name: raag-recording-system
    ports:
      - "5200:3000"
    environment:
      # Test mode configuration (default)
      - USE_LOCAL_STORAGE=true
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - MAX_FILE_SIZE_MB=100
      - SUPPORTED_FORMATS=wav,flac,aiff,mp3
      - JWT_SECRET=docker_test_jwt_secret
      - SESSION_SECRET=docker_test_session_secret
    volumes:
      # Persist uploaded files and database
      - ./local_storage:/app/local_storage
      - ./test_data.json:/app/test_data.json
      - ./sample_audio:/app/sample_audio
    command: >
      sh -c "
        node test-setup.js &&
        npm start
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (for production mode)
  postgres:
    image: postgres:15-alpine
    container_name: raag-postgres
    environment:
      - POSTGRES_DB=raag_recording_system
      - POSTGRES_USER=raag_user
      - POSTGRES_PASSWORD=raag_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    profiles: ["production"]

  # Production mode application (with PostgreSQL)
  raag-app-prod:
    build: .
    container_name: raag-recording-system-prod
    ports:
      - "5201:3000"
    environment:
      # Production mode configuration
      - USE_LOCAL_STORAGE=false
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=raag_recording_system
      - DB_USER=raag_user
      - DB_PASSWORD=raag_password
      - MAX_FILE_SIZE_MB=500
      - SUPPORTED_FORMATS=wav,flac,aiff
      - JWT_SECRET=your_production_jwt_secret
      - SESSION_SECRET=your_production_session_secret
      # Add your AWS S3 credentials here for production
      - AWS_REGION=us-west-2
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres
    restart: unless-stopped
    profiles: ["production"]

  # Redis (optional, for session management in production)
  redis:
    image: redis:7-alpine
    container_name: raag-redis
    restart: unless-stopped
    profiles: ["production"]

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: raag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - raag-app-prod
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data: